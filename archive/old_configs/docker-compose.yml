version: '3.8'

services:
  # Main API service
  income-estimator-api:
    build:
      context: .
      target: production
    container_name: income-estimator-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - API__HOST=0.0.0.0
      - API__PORT=8000
      - LOGGING__LEVEL=INFO
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - income-estimator-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development API service
  income-estimator-dev:
    build:
      context: .
      target: development
    container_name: income-estimator-dev
    ports:
      - "8001:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - API__HOST=0.0.0.0
      - API__PORT=8000
      - API__RELOAD=true
      - LOGGING__LEVEL=DEBUG
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./config:/app/config
      - ./tests:/app/tests
      - ./notebooks:/app/notebooks
    networks:
      - income-estimator-network
    profiles:
      - dev
    restart: unless-stopped

  # Jupyter notebook service
  jupyter:
    build:
      context: .
      target: development
    container_name: income-estimator-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=income-estimator
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./models:/app/models
      - ./notebooks:/app/notebooks
      - ./config:/app/config
    networks:
      - income-estimator-network
    profiles:
      - dev
    command: >
      bash -c "
        jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root
        --NotebookApp.token='income-estimator'
        --NotebookApp.password=''
        --notebook-dir=/app/notebooks
      "
    restart: unless-stopped

  # MLflow tracking server
  mlflow:
    image: python:3.11-slim
    container_name: income-estimator-mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow/mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - ./mlflow:/mlflow
    networks:
      - income-estimator-network
    profiles:
      - monitoring
    command: >
      bash -c "
        pip install mlflow &&
        mlflow server --host 0.0.0.0 --port 5000
        --backend-store-uri sqlite:///mlflow/mlflow.db
        --default-artifact-root /mlflow/artifacts
      "
    restart: unless-stopped

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: income-estimator-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - income-estimator-network
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: income-estimator-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - income-estimator-network
    profiles:
      - monitoring
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: income-estimator-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - income-estimator-network
    profiles:
      - caching
    restart: unless-stopped
    command: redis-server --appendonly yes

  # PostgreSQL database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: income-estimator-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=income_estimator
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./monitoring/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - income-estimator-network
    profiles:
      - database
    restart: unless-stopped

networks:
  income-estimator-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  redis_data:
  postgres_data:
